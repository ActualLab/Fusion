| MediatR | CommandR
| --- | --- |
| `IMediator` | `ICommander`
| `IServiceCollection.AddMediatR` | `IServiceCollection.AddCommander`
| `IServiceCollection.AddMediatR(assembly)` | `IServiceCollection.AttributeScanner().AddServicesFrom(assembly)` assuming you tag your command handler services with `[AddCommandHandlers]` or `[CommandService]` - in other words, CommandR doesn't have its own type scanner, but listed attributes allow you to use `AttributeScanner` from `ActualLab.DependencyInjection` to get the same result (and even more - e.g. scope-based registration)
| `IServiceProvider.GetRequiredService<IMediator>` | `IServiceProvider.GetRequiredService<ICommander>` or `IServiceProvider.Commander()`
| `IMediatR.Send(command, cancellationToken)` | `ICommander.CallAsync(command, cancellationToken)`
| `IRequest<TResult>` | `ICommand<TResult>`
| `IRequest` | `ICommand<Unit>`
| `IRequestHandler<TCommand, TResult>` | `ICommandHandler<TCommand>` - the result type is "encoded" in `TCommand` (which implements `ICommand<TResult>`) anyway
| `IRequestHandler<TCommand, Unit>` | `ICommandHandler<TCommand>`
| `RequestHandler<TCommand, Unit>` (synchronous) | No synchronous handlers: sorry, IMO they don't add enough value to justify having an extra set of interfaces for them
| `INotification` | No special type for notifications: any command is allowed to have N filtering handlers, so all you need is to declare all of them but one as filters
| Pipeline behaviors (`IPipelineBehavior<TRequest, TResponse>` & other types) | No special types for pipeline behaviors: any filtering handler is a pipeline behavior
| Exception handlers | No special type for exception handlers: any filtering handler can do this
| Polymorphic dispatch | Works the same way
| All popular IoC containers are supported | The "official" DI container on .NET, i.e. `IServiceProvider` from `Microsoft.Extensions.DependencyInjection.Abstractions`, is the only supported option. Nearly all other modern containers support its API, so adding an extra complexity to be fully container-agnostic doesn't seem to worth it nowadays. Fusion follows the same philosophy.
