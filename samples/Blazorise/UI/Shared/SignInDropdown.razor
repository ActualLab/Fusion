@inject BlazorModeHelper BlazorModeHelper
@inject ClientAuthHelper ClientAuthHelper

@{
    var usedAuthSchemas = User.Identities.Select(kv => kv.Key.Schema).ToHashSet();
    var unusedAuthSchemas = AuthSchemas.Where(p => !usedAuthSchemas.Contains(p.Name)).ToArray();
}

<AuthorizeView>
    <NotAuthorized>
        <Dropdown Class="@CssClass">
            <DropdownToggle Color="Color.Success">
                <Blazorise.Icon Name="FontAwesomeIcons.Key" /> Sign in @Why
            </DropdownToggle>
            <DropdownMenu>
                @foreach (var (name, displayName) in unusedAuthSchemas) {
                    <DropdownItem Color="Color.Primary" Clicked="@(_ => ClientAuthHelper.SignInAsync(name))">
                        With @displayName
                    </DropdownItem>
                }
            </DropdownMenu>
        </Dropdown>
    </NotAuthorized>
</AuthorizeView>

@code {
    [Parameter]
    public string CssClass { get; set; } = "";
    [Parameter]
    public string Why { get; set; } = "";
    [CascadingParameter]
    private Task<AuthState> AuthStateTask { get; set; } = null!;
    private AuthState AuthState { get; set; } = new(new User("")); // For SSB pre-render
    private User User => AuthState.User;
    private (string Name, string DisplayName)[] AuthSchemas { get; set; } = Array.Empty<(string, string)>();

    protected override async Task OnParametersSetAsync()
    {
        AuthState = await AuthStateTask;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender) {
            // GetSchemasAsync requires JS interop, so it can be called only at this point
            AuthSchemas = await ClientAuthHelper.GetSchemasAsync();
            StateHasChanged();
        }
    }
}
