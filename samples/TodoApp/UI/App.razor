@using ActualLab.OS
@implements IDisposable

<CascadingAuthState UsePresenceReporter="true">
    <ThemeProvider Theme="@Theme">
        <Router AppAssembly="@typeof(Program).Assembly">
            <Found Context="routeData">
                <RouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)"/>
            </Found>
            <NotFound>
                <LayoutView Layout="@typeof(MainLayout)">
                    <p>Sorry, there's nothing at this address.</p>
                </LayoutView>
            </NotFound>
        </Router>
    </ThemeProvider>
</CascadingAuthState>

@code {
    private Theme Theme { get; } = new() { IsGradient = true, IsRounded = false };

    [Inject] private IServiceProvider Services { get; set; } = null!;
    [Inject] private ISessionResolver SessionResolver { get; set; } = null!;
    [Inject] private UIHub UIHub { get; set; } = null!;

    [Parameter] public string SessionId { get; set; } = "";
    [Parameter] public string RenderModeKey { get; set; } = "";

    protected override void OnInitialized()
    {
        if (OSInfo.IsWebAssembly) {
            // RPC auto-substitutes Session.Default to cookie-based one on the server side for every call
            SessionResolver.Session = Session.Default;
            // That's how WASM app starts hosted services
            var rootServices = Services.Commander().Services;
            _ = rootServices.HostedServices().Start();
        }
        else {
            SessionResolver.Session = new Session(SessionId);
        }
        if (UIHub.IsInteractive)
            UIHub.Initialize(this.GetDispatcher(), RenderModeDef.GetOrDefault(RenderModeKey));
    }

    public void Dispose()
        => UIHub.Dispose();
}
