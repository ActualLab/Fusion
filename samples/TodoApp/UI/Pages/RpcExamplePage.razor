@page "/rpc-example"
@using System.Globalization
@using Samples.TodoApp.UI.Services
@using ActualLab.Rpc
@implements IDisposable
@inject IServiceProvider Services
@inject ISimpleService SimpleService
@inject ILogger<RpcExamplePage> Log

@{
    Log.LogInformation("Rendering");
}

<h1>RPC Example</h1>

<TextConnectionStatus />
<Div Margin="Margin.Is1.OnY">
    Current culture: <b>@(CultureInfo.CurrentUICulture.Name)</b> @@ @DateTime.Now.ToString("D")
</Div>
<Div Margin="Margin.Is1.OnY">
    Greet: <b>@_greeting</b>
</Div>
<Div Margin="Margin.Is1.OnY">
    Ping-pong: <b>@_lastPing</b> - <b>@_lastPong</b>
</Div>
<Div Margin="Margin.Is1.OnY">
    GetTable: <b>@_table.Title</b>
    @if (_table.IsCompleted) {
        <Span TextColor="TextColor.Secondary"> - completed</Span>
    }
</Div>
@if (_table.Rows.Count > 0) {
    @foreach (var row in _table.Rows) {
        <Div Margin="Margin.Is2.OnX">
            <span>Row <b>@row.Index</b>:</span>
            <span>@(row.Items.ToDelimitedString())</span>
            <span>, sum = <b>@(row.Sum?.ToString() ?? "...")</b></span>
            @if (row.IsCompleted) {
                <Span TextColor="TextColor.Secondary"> - completed</Span>
            }
        </Div>
    }
}

@code {
    private const int RowLimit = 16;
    private const int ItemLimit = 16;
    private static int _lastPingIndex;

    private readonly CancellationTokenSource? _stopTokenSource;
    private readonly CancellationToken _stopToken;
    private string _lastPing = "";
    private string _lastPong = "";
    private string _greeting = "";
    private TableModel<int> _table = new();

    public RpcExamplePage()
    {
        _stopTokenSource = new();
        _stopToken = _stopTokenSource.Token;
    }

    public void Dispose()
        => _stopTokenSource?.CancelAndDisposeSilently();

    protected override async Task OnInitializedAsync()
    {
        var cancellationToken = _stopToken;
        var greetingTask = SimpleService.Greet("Fusion explorer", cancellationToken);
        var tableTask = SimpleService.GetTable("Streamed table", cancellationToken);
        _ = PingPong(cancellationToken);
        _greeting = await greetingTask;
        var table = await tableTask;
        _table = new TableModel<int>(table.Title);
        _ = ReadTable(table, cancellationToken);
    }

    // Private methods

    private async Task ReadTable(Table<int> table, CancellationToken cancellationToken)
    {
        var model = _table;
        await foreach (var row in table.Rows.WithCancellation(cancellationToken)) {
            model.Rows.Add(new RowModel<int>(row.Index));
            StateHasChanged();
            _ = ReadRow(row, cancellationToken);
            if (model.Rows.Count >= RowLimit)
                break;
        }
        model.IsCompleted = true;
        StateHasChanged();
    }

    private async Task ReadRow(Row<int> row, CancellationToken cancellationToken)
    {
        var model = _table.Rows[row.Index];
        using var updateSumCts = cancellationToken.CreateLinkedTokenSource();
        await foreach (var item in row.Items.WithCancellation(cancellationToken)) {
            model.Items.Add(item);
            StateHasChanged();
            if (model.Items.Count >= ItemLimit)
                break;
            _ = UpdateSum(model, updateSumCts.Token); // Notice we don't await it here!
        }
        await updateSumCts.CancelAsync();
        await UpdateSum(model, cancellationToken); // The final UpdateSum is called for all items
        model.IsCompleted = true;
        StateHasChanged();
    }

    private async Task UpdateSum(RowModel<int> row, CancellationToken cancellationToken)
    {
        row.Sum = null;
        var items = row.Items.ToArray(); // We need a copy here to enable concurrent enumeration
        var stream = RpcStream.New(items);
        var sum = await SimpleService.Sum(stream, cancellationToken);

        cancellationToken.ThrowIfCancellationRequested(); // No updates if CT was cancelled
        row.Sum = sum == items.Sum() ? sum : -sum; // Quick error check
        StateHasChanged();
    }

    private async Task PingPong(CancellationToken cancellationToken)
    {
        var clientSideService = Services.GetService<SimpleClientSideService>();
        if (clientSideService == null) {
            _lastPong = "Switch to WASM - Blazor Server can't play ping-pong!";
            StateHasChanged();
            return;
        }

        _ = SendPings(cancellationToken);
        await foreach (var pong in clientSideService.PongChannel.Reader.ReadAllAsync(cancellationToken)) {
            _lastPong = pong;
            StateHasChanged();
        }
    }

    private async Task SendPings(CancellationToken cancellationToken)
    {
        var peer = Services.RpcHub().GetClientPeer(RpcPeerRef.Default);
        // RpcNoWait calls are simply dropped if there is no connection -
        // that's why it makes sense to wait for connection before sending the first ping.
        // Try disconnecting the
        await peer.WhenConnected(cancellationToken);
        while (true) {
            var message = $"Ping {Interlocked.Increment(ref _lastPingIndex)}";
            _lastPing = message;
            _lastPong = "";
            StateHasChanged();
            await SimpleService.Ping(message); // You don't have to await it
            await Task.Delay(TimeSpan.FromSeconds(0.5), cancellationToken);
        }
    }

    // Nested types

    public sealed class TableModel<T>(string title = "")
    {
        public string Title { get; } = title;
        public List<RowModel<T>> Rows { get; } = new();
        public bool IsCompleted { get; set; }
    }

    public sealed class RowModel<T>(int index)
    {
        public int Index { get; } = index;
        public List<T> Items { get; } = new();
        public int? Sum { get; set; }
        public bool IsCompleted { get; set; }
    }
}
