@using Stl.Rpc
@inherits StatefulComponentBase<IState<RpcPeerState>>

@{
    var m = State.Value;
    var isConnected = m.IsOrLikelyConnected;
    var iconName = isConnected
        ? FontAwesomeIcons.Cloud
        : FontAwesomeIcons.ExclamationTriangle;
    var textColor = isConnected
        ? TextColor.Default
        : TextColor.Warning;
}

<BarItem>
    <BarDropdown Class="@CssClass" RightAligned="true">
        <BarDropdownToggle>
            <BarIcon IconName="@iconName" TextColor="@textColor"></BarIcon>
        </BarDropdownToggle>
        <BarDropdownMenu>
            <BarDropdownItem TextColor="@textColor">
                <span>@m.GetDescription(true)</span>
                @if (m.ReconnectsIn is { } reconnectsIn) {
                    <span> Will reconnect <TimerBadge ExpiresAt="@(Clock.Now + reconnectsIn)"/>. </span>
                    <Button Color="Color.Success" Clicked="@Reconnect">Reconnect</Button>
                }
            </BarDropdownItem>
        </BarDropdownMenu>
    </BarDropdown>
</BarItem>

@code {
    [Inject] private RpcPeerStateMonitor Monitor { get; init; } = null!;
    [Inject] private IMomentClock Clock { get; init; } = null!;

    [Parameter] public string CssClass { get; set; } = "";

    protected override IState<RpcPeerState> CreateState()
        => Monitor.State;

    private void Reconnect()
        => Services.RpcHub().InternalServices.ClientPeerReconnectDelayer.CancelDelays();
}
