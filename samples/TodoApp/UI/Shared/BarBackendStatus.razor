@using Stl
@inherits ComputedStateComponent<ImmutableList<(string Backend, Exception Error)>>
@inject Session Session
@inject IBackendStatus BackendStatus

@{
    var errors = State.ValueOrDefault ?? ImmutableList<(string Backend, Exception Error)>.Empty;
}

@if (errors.Any()) {
    <BarItem>
        <BarDropdown Class="@CssClass">
            <BarDropdownToggle>
                <BarIcon IconName="@FontAwesomeIcons.ExclamationTriangle" TextColor="TextColor.Danger"></BarIcon>
            </BarDropdownToggle>
            <BarDropdownMenu RightAligned="true">
                @foreach (var (backend, error) in errors) {
                    <BarDropdownItem TextColor="TextColor.Danger">
                        <b>@backend:</b> @(error.Message.NullIfEmpty() ?? "Unknown error")
                    </BarDropdownItem>
                }
            </BarDropdownMenu>
        </BarDropdown>
    </BarItem>
}

@code {
    [Parameter]
    public string CssClass { get; set; } = "";

    protected override Task<ImmutableList<(string Backend, Exception Error)>> ComputeState(CancellationToken cancellationToken)
        => BackendStatus.GetAllErrors(Session, cancellationToken);
}
