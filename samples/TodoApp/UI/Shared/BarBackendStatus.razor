@using Stl
@inherits ComputedStateComponent<string>
@inject Session _session
@inject IBackendStatus _backendStatus

@{
    var error = State.ValueOrDefault ?? "";
}

@if (!error.IsNullOrEmpty()) {
    <BarItem>
        <BarDropdown Class="@CssClass">
            <BarDropdownToggle>
                <BarIcon IconName="@FontAwesomeIcons.ExclamationTriangle" TextColor="TextColor.Danger"></BarIcon>
            </BarDropdownToggle>
            <BarDropdownMenu RightAligned="true">
                <BarDropdownItem TextColor="TextColor.Danger">
                    Backend error: @error
                </BarDropdownItem>
            </BarDropdownMenu>
        </BarDropdown>
    </BarItem>
}

@code {
    [Parameter]
    public string CssClass { get; set; } = "";

    protected override async Task<string> ComputeState(CancellationToken cancellationToken)
    {
        var error = await _backendStatus.GetError(_session, null, cancellationToken);
        if (error == null)
            return "";
        return error.Message?.NullIfEmpty() ?? "Unknown error.";
    }
}
