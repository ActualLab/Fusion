@using Stl
@using Stl.DependencyInjection
@using Stl.Fusion.Internal
@using Stl.Rpc
@inherits ComputedStateComponent<RpcPeerState?>
@inject Session Session

@{
    var state = State.ValueOrDefault;
    var isDisconnected = !(state?.IsConnected ?? true);
    var message = state == null
        ? "Connecting..."
        : isDisconnected
            ? state.Error?.Message ?? "Unknown error."
            : "Connected.";
    var iconName = isDisconnected
        ? FontAwesomeIcons.ExclamationTriangle
        : FontAwesomeIcons.Cloud;
    var textColor = isDisconnected
        ? TextColor.Warning
        : TextColor.Default;
}

<BarItem>
    <BarDropdown Class="@CssClass" RightAligned="true">
        <BarDropdownToggle>
            <BarIcon IconName="@iconName" TextColor="@textColor"></BarIcon>
        </BarDropdownToggle>
        <BarDropdownMenu>
            <BarDropdownItem TextColor="@textColor">
                <span>@message</span>
                @if (state?.ReconnectsAt is { } reconnectsAt) {
                    <span> Will reconnect <TimerBadge ExpiresAt="reconnectsAt"/>. </span>
                    <Button Color="Color.Success" Clicked="@TryReconnect">Reconnect</Button>
                }
            </BarDropdownItem>
        </BarDropdownMenu>
    </BarDropdown>
</BarItem>

@code {
    private RpcPeerStateMonitor? _monitor;

    [Parameter]
    public string CssClass { get; set; } = "";

    protected override void OnInitialized()
    {
        _monitor = Services.GetService<RpcPeerStateMonitor>();
        _monitor?.Start();
        base.OnInitialized();
    }

    protected override async Task<RpcPeerState?> ComputeState(CancellationToken cancellationToken)
    {
        if (_monitor == null)
            return null;

        return await _monitor.State.Use(cancellationToken).ConfigureAwait(false);
    }

    private void TryReconnect()
        => Services.RpcHub().InternalServices.ClientPeerReconnectDelayer.CancelDelays();
}
