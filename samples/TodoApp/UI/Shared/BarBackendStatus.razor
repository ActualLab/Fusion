@using Stl
@using Stl.DependencyInjection
@using Stl.Fusion.Internal
@inherits ComputedStateComponent<bool?>
@inject Session Session

@{
    var error = State.Error;
    var isConnected = error == null && (State.Value ?? true); // null = "Unknown state", we view it as "connected" here
    var message = isConnected
        ? "Connected."
        : error?.Message ?? "Unknown error";
    var iconName = isConnected
        ? FontAwesomeIcons.Cloud
        : FontAwesomeIcons.ExclamationTriangle;
    var textColor = isConnected
        ? TextColor.Default
        : TextColor.Warning;
}

<BarItem>
    <BarDropdown Class="@CssClass">
        <BarDropdownToggle>
            <BarIcon IconName="@iconName" TextColor="@textColor"></BarIcon>
        </BarDropdownToggle>
        <BarDropdownMenu RightAligned="true">
            <BarDropdownItem TextColor="@textColor">
                @message
            </BarDropdownItem>
        </BarDropdownMenu>
    </BarDropdown>
</BarItem>

@code {
    private RpcPeerConnectionMonitor? _connectionMonitor;

    [Parameter]
    public string CssClass { get; set; } = "";

    protected override void OnInitialized()
    {
        _connectionMonitor = Services.GetService<RpcPeerConnectionMonitor>();
        _connectionMonitor?.Start();
        base.OnInitialized();
    }

    protected override async Task<bool?> ComputeState(CancellationToken cancellationToken)
    {
        if (_connectionMonitor == null)
            return null;

        var isConnected = await _connectionMonitor.IsConnected.Use(cancellationToken).ConfigureAwait(false);
        return isConnected ?? true; // null is "unknown", we want to show it as "connected"
    }
}
