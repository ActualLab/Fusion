@inject Session _session
@inject UICommandRunner _commandRunner
@inject ILogger<TodoItemView> _log

@{
    _log.LogInformation("Rendering, Item = {Item}", Value);
}

<Addons Margin="Margin.Is3.OnY">
    <Addon AddonType="AddonType.Start">
        <AddonLabel>
            <Blazorise.Icon Name="@(Value.IsDone ? FontAwesomeIcons.CheckSquare : FontAwesomeIcons.Square)"
                            @onclick="InvertDone" />
        </AddonLabel>
    </Addon>
    <TextEdit TextChanged="BlazorEventHelper.NonRendering<string>(UpdateTitle)"
              ChangeTextOnKeyPress="false"
              Text="@Value.Title"/>
    <Addon AddonType="AddonType.End">
        <Button Clicked="Remove" Color="Color.Warning">
            <Blazorise.Icon Name="FontAwesomeIcons.Minus"/>
        </Button>
    </Addon>
</Addons>

@code {
    [Parameter, ParameterComparer(typeof(ByReferenceParameterComparer))]
    public Todo Value { get; set; } = null!;

    public override Task SetParametersAsync(ParameterView parameters)
        => this.HasChangedParameters(parameters) ? base.SetParametersAsync(parameters) : Task.CompletedTask;

    private Task InvertDone()
    {
        var todo = Value with { IsDone = !Value.IsDone };
        return _commandRunner.Run(new AddOrUpdateTodoCommand(_session, todo));
    }

    private Task UpdateTitle(string title)
    {
        title = title.Trim();
        if (Value.Title == title)
            return Task.CompletedTask;
        var todo = Value with { Title = title };
        return _commandRunner.Run(new AddOrUpdateTodoCommand(_session, todo));
    }

    private Task Remove()
        => _commandRunner.Run(new RemoveTodoCommand(_session, Value.Id));
}
