<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="latest" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="$([MSBuild]::GetPathOfFileAbove('Directory.Build.props', '$(MSBuildThisFileDirectory)../'))" />
  <PropertyGroup>
    <!-- Compiler & toolchain -->
    <BaseIntermediateOutputPath>$(SolutionDir)artifacts\obj\$(MSBuildProjectName)</BaseIntermediateOutputPath>
    <OutputPath>$(SolutionDir)artifacts\bin\$(MSBuildProjectName)</OutputPath>
    <PublishConfiguration>Release</PublishConfiguration>
    <IsPackable>true</IsPackable>
    <!-- PolySharp -->
    <PolySharpIncludeRuntimeSupportedAttributes>true</PolySharpIncludeRuntimeSupportedAttributes>
    <!-- Signing -->
    <DefineConstants Condition="'$(PUBLIC_BUILD)' != ''">$(DefineConstants);SIGN_ASSEMBLIES</DefineConstants>
  </PropertyGroup>

  <PropertyGroup>
    <!-- [UnsafeAccessor(...)] currently causes AOT errors, so it's disabled for now -->
    <UseUnsafeAccessors Condition="'$(UseUnsafeAccessors)' == ''">false</UseUnsafeAccessors>
    <DefineConstants Condition="$(UseUnsafeAccessors)">$(DefineConstants);USE_UNSAFE_ACCESSORS</DefineConstants>
  </PropertyGroup>

  <PropertyGroup>
    <!-- UseDynamicMethods -->
    <UseDynamicMethods Condition="'$(UseDynamicMethods)' == ''">true</UseDynamicMethods>
    <DefineConstants Condition="$(UseDynamicMethods)">$(DefineConstants);USE_DYNAMIC_METHODS</DefineConstants>
  </PropertyGroup>

  <!-- Suppressed warnings -->
  <PropertyGroup>
    <!-- [MA0009] Regular expressions should not be vulnerable to Denial of Service attacks -->
    <!-- [MA0015] 'command.Key' is not a valid parameter name -->
    <!-- [MA0016] Prefer return collection abstraction instead of implementation -->
    <!-- [MA0018] Do not declare static members on generic types -->
    <!-- [MA0026] To-do : ... -->
    <!-- [MA0046] The delegate must have 2 parameters -->
    <!-- [MA0048] File name must match type name -->
    <!-- [MA0051] Method is too long (71 lines; maximum allowed: 60) -->
    <!-- [MA0056] Do not call overridable members in constructor -->
    <!-- [MA0064] Avoid locking on publicly accessible instance -->
    <!-- [MA0097] A class that implements IComparable<T> or IComparable should override comparison operators -->
    <!-- [MA0099] Use Explicit enum value for 'ComputedStateComponentOptions' instead of 0 -->
    <NoWarn>$(NoWarn);MA0009;MA0015;MA0016;MA0018;MA0026;MA0046;MA0048;MA0051;MA0056;MA0064;MA0097;MA0099</NoWarn>
    <!-- [VSTHRD002] Synchronously waiting on tasks or awaiters may cause deadlocks. Use await or JoinableTaskFactory.Run instead. -->
    <!-- [VSTHRD003] Avoid awaiting or returning a Task representing work that was not started within your context as that can lead to deadlocks. -->
    <!-- [VSTHRD103] Cancel synchronously blocks. Await CancelAsync instead. -->
    <!-- [VSTHRD110] Observe the awaitable result of this method call by awaiting it, assigning to a variable, or passing it to another method. -->
    <!-- [VSTHRD200] Use "Async" suffix in names of methods that return an awaitable type. -->
    <NoWarn>$(NoWarn);VSTHRD003;VSTHRD002;VSTHRD103;VSTHRD110;VSTHRD200</NoWarn>

    <!-- Conditional for .NET Core 3.1 -->
    <!-- [ILXXXX] Don't play any role on this platform -->
    <NoWarn Condition="$(TargetFramework.StartsWith('netcore'))">$(NoWarn);IL2046;IL2092;IL2095</NoWarn>
  </PropertyGroup>

  <!--
  <ItemGroup>
    <InternalsVisibleTo Include="ActualLab.Tests" />
    <InternalsVisibleTo Include="ActualLab.Fusion.Tests" />
  </ItemGroup>
  -->

  <!-- Polyfills -->
  <ItemGroup Condition="!($(TargetFramework.StartsWith('net8')))">
    <PackageReference Include="PolySharp" />
  </ItemGroup>

  <!-- Analyzers -->
  <ItemGroup>
    <PackageReference Include="Nerdbank.GitVersioning" />
    <PackageReference Include="Microsoft.SourceLink.GitHub" />
    <PackageReference Include="Roslynator.Analyzers" />
    <PackageReference Include="Meziantou.Analyzer" />
    <PackageReference Include="Microsoft.VisualStudio.Threading.Analyzers" />
  </ItemGroup>

  <!-- Global usings -->
  <ItemGroup Condition="!($(MSBuildProjectFile.Contains('Generators')))">
    <Using Include="System.Console" Static="True" />
    <Using Include="System.Collections" />
    <Using Include="System.Collections.Immutable" />
    <Using Include="System.Collections.Concurrent" />
    <Using Include="System.Linq" />
    <Using Include="System.Reactive" /> <!-- Mainly for Unit type -->
    <Using Include="System.Reflection" />
    <Using Include="System.Runtime.CompilerServices" />
    <Using Include="System.Runtime.InteropServices" />
    <Using Include="System.Runtime.Serialization" />
    <Using Include="System.Text.Json" />
    <Using Include="System.Text.Json.Serialization" />
    <Using Include="System.Threading.Channels" />
    <Using Include="ActualLab" />
    <Using Include="ActualLab.Api" />
    <Using Include="ActualLab.Async" />
    <Using Include="ActualLab.Collections" />
    <Using Include="ActualLab.DependencyInjection" />
    <Using Include="ActualLab.Diagnostics" />
    <Using Include="ActualLab.Identifiers" />
    <Using Include="ActualLab.Mathematics" />
    <Using Include="ActualLab.Reflection" />
    <Using Include="ActualLab.Serialization" />
    <Using Include="ActualLab.Text" />
    <Using Include="ActualLab.Time" />
    <Using Include="MemoryPack" />
    <Using Include="Microsoft.Extensions.DependencyInjection" />
    <Using Include="Microsoft.Extensions.Logging" />
    <Using Include="Microsoft.Extensions.Logging.Abstractions" />
  </ItemGroup>

  <!-- Extra global usings for CommandR projects -->
  <ItemGroup Condition="$(MSBuildProjectFile.StartsWith('ActualLab.CommandR'))">
    <Using Include="ActualLab.CommandR" />
    <Using Include="ActualLab.CommandR.Configuration" />
    <Using Include="ActualLab.CommandR.Commands" />
  </ItemGroup>

  <!-- Extra global usings for Fusion projects -->
  <ItemGroup Condition="$(MSBuildProjectFile.StartsWith('ActualLab.Fusion'))">
    <Using Include="ActualLab.Fusion" />
    <Using Include="ActualLab.Fusion.Operations" />
    <Using Include="ActualLab.CommandR" />
    <Using Include="ActualLab.CommandR.Configuration" />
    <Using Include="ActualLab.CommandR.Commands" />
  </ItemGroup>

  <!-- Packaging & SourceLink -->
  <PropertyGroup>
    <!-- SourceLink -->
    <EnableSourceLink>false</EnableSourceLink>
    <EnableSourceLink Condition="'$(PUBLIC_BUILD)' != ''">true</EnableSourceLink>
    <UseSourceLink>$(EnableSourceLink)</UseSourceLink>
    <RepositoryType>git</RepositoryType>
    <PrivateRepositoryUrl>$(RepositoryUrl)</PrivateRepositoryUrl>
    <ScmRepositoryUrl>$(RepositoryUrl)</ScmRepositoryUrl>
    <PackageProjectUrl>$(RepositoryUrl)</PackageProjectUrl>
    <PublishRepositoryUrl>true</PublishRepositoryUrl>
    <EmbedUntrackedSources>true</EmbedUntrackedSources>
    <!-- Revision info -->
    <GitVersionBaseDirectory>$(RepoRoot)</GitVersionBaseDirectory>
    <RevisionId>$(GitCommitId)</RevisionId>
    <SourceRevisionId>$(GitCommitId)</SourceRevisionId>
    <!-- Symbols: we embed .pdb into .nupkg & don't produce .snupkg (no extra value in this case) -->
    <IncludeSymbols>false</IncludeSymbols>
    <SymbolPackageFormat>snupkg</SymbolPackageFormat>
    <!-- Include .pdb right into the .nupkg  -->
    <AllowedOutputExtensionsInPackageBuildOutputFolder>$(AllowedOutputExtensionsInPackageBuildOutputFolder);.pdb</AllowedOutputExtensionsInPackageBuildOutputFolder>
  </PropertyGroup>
  <PropertyGroup Condition="'$(EnableSourceLink)' == 'true'">
    <!-- Deterministic build is on when SourceLink is on -->
    <ContinuousIntegrationBuild>$(EnableSourceLink)</ContinuousIntegrationBuild>
  </PropertyGroup>
  <ItemGroup Condition="'$(EnableSourceLink)' =='true'">
    <SourceRoot Include="$(RepoRoot)" RepositoryUrl="$(RepositoryUrl)" SourceControl="git" RevisionId="$(GitCommitId)" />
    <!-- Embed the code of generated source files -->
    <EmbeddedFiles Include="$(BaseIntermediateOutputPath)$(Configuration)\**\*.cs" />
  </ItemGroup>

</Project>
