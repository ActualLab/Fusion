@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.JSInterop
@using Stl.Fusion.Authentication
@using Stl.OS
@inject ISessionProvider SessionProvider
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject PresenceService PresenceService
@inject IJSRuntime JSRuntime

<CascadingAuthenticationState>
    <CascadingValue TValue="Task<AuthState>" Value="@GetAuthStateAsync()" ChildContent="@ChildContent"/>
</CascadingAuthenticationState>

@code {
    [Parameter]
    public RenderFragment ChildContent { get; set; } = _ => { };
    [Parameter]
    public string SessionIdJavaScriptExpression { get; set; } = "window.FusionAuth.sessionId";
    [Parameter]
    public string SessionId {
        get => SessionProvider.HasSession ? SessionProvider.Session.Id : "";
        set {
            if (SessionProvider.HasSession || string.IsNullOrEmpty(value))
                return;
            SessionProvider.Session = new Session(value);
        }
    }
    [Parameter]
    public bool StartPresenceService { get; set; } = true;

    protected override void OnParametersSet()
    {
        if (SessionId != "" || OSInfo.Kind != OSKind.WebAssembly)
            return;
        var inProcessJSRuntime = (IJSInProcessRuntime) JSRuntime;
        SessionId = inProcessJSRuntime.Invoke<string>("eval", SessionIdJavaScriptExpression);
        if (StartPresenceService)
            Task.Run(() => PresenceService.StartAsync(default)).Ignore();
    }

    private Task<AuthState> GetAuthStateAsync()
        => AuthenticationStateProvider.GetAuthenticationStateAsync().ContinueWith(t => (AuthState) t.Result);
}
