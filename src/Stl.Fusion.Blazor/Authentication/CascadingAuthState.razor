@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.JSInterop
@using Stl.Async
@using Stl.Fusion.Authentication
@using Stl.Fusion.Blazor.Internal
@using Stl.OS
@using Stl.Text
@implements IDisposable
@inject Session Session
@inject AuthStateProvider AuthStateProvider
@inject PresenceService PresenceService
@inject NavigationManager Nav
@inject IJSRuntime JS

<CascadingAuthenticationState>
    <CascadingValue TValue="Task<AuthState>" Value="@GetAuthState()" ChildContent="@ChildContent"/>
</CascadingAuthenticationState>

@code {
    [Parameter] 
    public RenderFragment ChildContent { get; set; } = _ => { };
    [Parameter] 
    public bool StartPresenceService { get; set; } = true;

    protected override void OnInitialized()
    {
        if (Session.Id.IsEmpty)
            throw Errors.NoSessionId();

        AuthStateProvider.AuthenticationStateChanged += OnAuthenticationStateChanged;
        OnAuthenticationStateChanged(AuthStateProvider.GetAuthenticationStateAsync());
        if (StartPresenceService)
            PresenceService.Start();
    }

    void IDisposable.Dispose()
        => AuthStateProvider.AuthenticationStateChanged -= OnAuthenticationStateChanged;


    private void OnAuthenticationStateChanged(Task<AuthenticationState> newAuthStateTask)
    {
        _ = newAuthStateTask.ContinueWith(t => {
            if (!t.IsCompletedSuccessfully)
                return; // Will react to the next change
            var authState = (AuthState) t.Result;
            if (!authState.IsSignOutForced)
                return;
            // Current Session is unusable due to forced sign-out.
            // The only way to get an usable one is to reload the page.
            _ = InvokeAsync(() => Nav.NavigateTo(Nav.Uri, true));
        }, TaskScheduler.Current);
    }

    private Task<AuthState> GetAuthState()
        => AuthStateProvider.GetAuthenticationStateAsync()
            .ContinueWith(t => (AuthState) t.Result, TaskScheduler.Current);
}
