<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".cs" encoding="utf-8" #>
<#@ assembly Name="System.Core.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#
    const int maxItemCount = 10;
    const int maxGenericItemCount = 4;

    IEnumerable<int> AllBut(int count, int exceptIndex, int startIndex = 0)
    {
        for (var i = startIndex; i < count; i++)
            if (i != exceptIndex)
                yield return i;
    }

    IEnumerable<int?> AllAnd(int count, int insertIndex, int startIndex = 0)
    {
        for (var i = startIndex; i < count; i++) {
            if (i == insertIndex)
                yield return null;
            yield return i;

        }
    }

    string ItemList(string format, int count, int startIndex = 0)
        => RemoveList(format, count, -1, startIndex);

    string RemoveList(string format, int count, int exceptIndex, int startIndex = 0)
        => string.Join(", ", AllBut(count, exceptIndex, startIndex).Select(i => string.Format(format, i)));

    string InsertList(string format, int count, int insertIndex, string replacement, int startIndex = 0)
        => string.Join(", ", AllAnd(count, insertIndex, startIndex).Select(i => i.HasValue ? string.Format(format, i) : replacement));

    string SimpleTypeName(int c)
        => c == 0 ? "ArgumentList0" : $"ArgumentListS{c}";

    string GenericTypeName(int c, bool useParameters = false)
        => c == 0 ? "ArgumentList0" : $"ArgumentListG{c}<{ItemList(useParameters ? "T{0}": "", Math.Min(c, maxGenericItemCount))}>";
#>
// ReSharper disable UnusedAutoPropertyAccessor.Global
// ReSharper disable MemberCanBePrivate.Global
// ReSharper disable ArrangeConstructorOrDestructorBody
using System.Diagnostics.CodeAnalysis;
using System.Linq.Expressions;
using System.Numerics;
using System.Reflection.Emit;
using ActualLab.Internal;
using MessagePack;

namespace ActualLab.Interception;

#pragma warning disable MA0012
#pragma warning disable CA2201, CS0219
#pragma warning disable IL2046

public abstract partial record ArgumentList
{
    public const int MaxItemCount = <#=maxItemCount#>;
    public const int MaxGenericItemCount = <#=maxGenericItemCount#>;

#if NET5_0_OR_GREATER
<# for (var itemCount = 1; itemCount <= maxItemCount; itemCount++) {
#>
    [DynamicDependency(DynamicallyAccessedMemberTypes.All, typeof(<#=SimpleTypeName(itemCount)#>))]
    [DynamicDependency(DynamicallyAccessedMemberTypes.All, typeof(<#=GenericTypeName(itemCount)#>))]
<# } #>
#endif
    public static readonly ImmutableArray<Type> SimpleTypes = ImmutableArray.Create(new [] {
<# for (var itemCount = 0; itemCount <= maxItemCount; itemCount++) {
#>
        typeof(<#=SimpleTypeName(itemCount)#>),
<# } #>
    });
    public static readonly ImmutableArray<Type> GenericTypes = ImmutableArray.Create(new [] {
<# for (var itemCount = 0; itemCount <= maxItemCount; itemCount++) {
#>
        typeof(<#=GenericTypeName(itemCount)#>),
<# } #>
    });

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static ArgumentList New() => Empty;
<# for (var itemCount = 1; itemCount <= maxItemCount; itemCount++) {
    var itemTypes = ItemList("T{0}", itemCount);
    var itemDefs = ItemList("T{0} item{0}", itemCount);
    var items = ItemList("item{0}", itemCount);
    var argListDefPrefix = $"ArgumentListType.Get({ItemList("typeof(T{0})", itemCount)}), ";
#>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static ArgumentList New<<#=itemTypes#>>(<#=itemDefs#>)
        => AllowGenerics
            ? new <#=GenericTypeName(itemCount, true)#>(<#=itemCount > maxGenericItemCount ? argListDefPrefix : ""#><#=items#>)
            : new <#=SimpleTypeName(itemCount)#>(<#=argListDefPrefix#><#=items#>);
<# } #>

<#
    for (var t = 0; t < maxItemCount; t++) {
#>
    public virtual T Get<#=t#><T>() => throw new IndexOutOfRangeException();
<#
    }
#>
}

<# for (var itemCount = 1; itemCount <= maxItemCount; itemCount++) {
#>
public abstract record ArgumentList<#=itemCount#> : ArgumentList
{
    [JsonIgnore, Newtonsoft.Json.JsonIgnore, IgnoreDataMember, MemoryPackIgnore, IgnoreMember]
    public override int Length => <#=itemCount#>;

    protected static Type?[] CreateNonDefaultItemTypes()
        => new Type?[<#=itemCount#>];
}

<# for (var mode = 0; mode < 2; mode++) {
       var useGenerics = mode == 0;
       var genericItemCount = useGenerics ? Math.Min(itemCount, maxGenericItemCount) : 0;
       var simpleItemCount = itemCount - genericItemCount;
       var genericArguments = genericItemCount == 0 ? ""
           : "<" + ItemList("T{0}", genericItemCount) + ">";
       var sb = new StringBuilder();
       sb.Append(ItemList("T{0} item{0}", genericItemCount));
       if (simpleItemCount > 0) {
           if (sb.Length != 0)
               sb.Append(", ");
           sb.Append(ItemList("object? item{0}", itemCount, genericItemCount));
       }
       var itemDefs = sb.ToString();
       var constructorName = useGenerics
           ? $"ArgumentListG{itemCount}"
           : SimpleTypeName(itemCount);
       var className = useGenerics
           ? constructorName + genericArguments
           : constructorName;

       string TypeOf(int i) => i < genericItemCount ? $"T{i}" : "object?";
#>
public sealed record <#=className#> : ArgumentList<#=itemCount#>
{
<# if (simpleItemCount == 0) { #>
    private static ArgumentListType? _cachedType;
    // ReSharper disable once InconsistentNaming
    private static ArgumentListType _type => _cachedType ??= ArgumentListType.Get(<#=ItemList("typeof(T{0})", genericItemCount)#>);
<# } else { #>
    private readonly ArgumentListType _type;
<# } #>

<# for (var t = 0; t < itemCount; t++) { #>
    private <#=TypeOf(t)#> _item<#=t#>;
<# } #>

    public override ArgumentListType Type => _type;

<# for (var t = 0; t < itemCount; t++) { #>
    public <#=TypeOf(t)#> Item<#=t#> {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => _item<#=t#>;
        init => _item<#=t#> = value;
    }
<# } #>

    // Constructors

<# if (simpleItemCount == 0) { #>
    public <#=constructorName#>()
    {
<# for (var t = 0; t < itemCount; t++) { #>
        _item<#=t#> = default!;
<# } #>
    }

    public <#=constructorName#>(<#=itemDefs#>)
    {
<# for (var t = 0; t < itemCount; t++) { #>
        _item<#=t#> = item<#=t#>;
<# } #>
    }
<# } else { #>
    public <#=constructorName#>(ArgumentListType type)
    {
        _type = type;
        var defaultValues = type.DefaultValues;
<# for (var t = 0; t < genericItemCount; t++) { #>
        _item<#=t#> = default!;
<# } #>
<# for (var t = genericItemCount; t < itemCount; t++) { #>
        _item<#=t#> = defaultValues[<#=t#>];
<# } #>
    }

    public <#=constructorName#>(ArgumentListType type, <#=itemDefs#>)
    {
        _type = type;
<# for (var t = 0; t < itemCount; t++) { #>
        _item<#=t#> = item<#=t#>;
<# } #>
    }
<# } #>

    // Duplicate

    public override ArgumentList Duplicate()
<# if (simpleItemCount == 0) { #>
        => new <#=className#>(<#= ItemList("Item{0}", itemCount) #>);
<# } else { #>
        => new <#=className#>(_type, <#= ItemList("Item{0}", itemCount) #>);
<# } #>

    // ToString & ToArray

    public override string ToString()
    {
        var sb = StringBuilderExt.Acquire();
        sb.Append('(');
<# for (var t = 0; t < itemCount; t++) { #>
<# if (t != 0) { #>
        sb.Append(", ");
<# }#>
        sb.Append(Item<#=t#> is CancellationToken ct<#=t#> ? ct<#=t#>.Format() : Item<#=t#>);
<# } #>
        sb.Append(')');
        return sb.ToStringAndRelease();
    }

    public override object?[] ToArray()
        => new object?[] { <#= ItemList("Item{0}", itemCount) #> };

    public override object?[] ToArray(int skipIndex)
<# if (itemCount == 1) { #>
        => skipIndex == 0
            ? Array.Empty<object?>()
            : throw new ArgumentOutOfRangeException(nameof(skipIndex));
<# } else { #>
        => skipIndex switch {
<# for (var t = 0; t < itemCount; t++) { #>
            <#=t#> => new object?[] { <#= RemoveList("Item{0}", itemCount, t) #> },
<# } #>
            _ => throw new ArgumentOutOfRangeException(nameof(skipIndex))
        };
<# } #>

    // GetNonDefaultItemTypes

    public override Type?[]? GetNonDefaultItemTypes()
    {
        var itemTypes = (Type?[]?)null;
        Type? itemType;
<# if (simpleItemCount != 0) { #>
        Type? expectedItemType;
<# } #>
<#
    for (var t = 0; t < itemCount; t++) {
#>
<# if (t < genericItemCount) { #>
        if (!typeof(T<#=t#>).IsValueType) {
            itemType = _item<#=t#>?.GetType();
            if (itemType != null && itemType != typeof(T<#=t#>)) {
                itemTypes ??= CreateNonDefaultItemTypes();
                itemTypes[<#=t#>] = itemType;
            }
        }
<# } else { #>
        expectedItemType = _type.ItemTypes[<#=t#>];
        if (!expectedItemType.IsValueType) {
            itemType = _item<#=t#>?.GetType();
            if (itemType != null && itemType != expectedItemType) {
                itemTypes ??= CreateNonDefaultItemTypes();
                itemTypes[<#=t#>] = itemType;
            }
        }
<# } #>
<#
    }
#>
        return itemTypes;
    }

    // GetType

    public override Type? GetType(int index)
        => index switch {
<# for (var t = 0; t < itemCount; t++) { #>
<# if (t < genericItemCount) { #>
            <#=t#> => typeof(T<#=t#>),
<# } else { #>
            <#=t#> => _type.ItemTypes[<#=t#>],
<# } #>
<# } #>
            _ => null,
        };

    // Get

<#
    for (var t = 0; t < itemCount; t++) {
#>
    public override T Get<#=t#><T>() => Item<#=t#> is T value ? value : default!;
<#
    }
#>

    public override T Get<T>(int index)
        => index switch {
<# for (var t = 0; t < itemCount; t++) { #>
            <#=t#> => Item<#=t#> is T value ? value : default!,
<# } #>
            _ => throw new ArgumentOutOfRangeException(nameof(index))
        };

    public override object? GetUntyped(int index)
        => index switch {
<# for (var t = 0; t < itemCount; t++) { #>
            // ReSharper disable once HeapView.PossibleBoxingAllocation
            <#=t#> => Item<#=t#>,
<# } #>
            _ => throw new ArgumentOutOfRangeException(nameof(index))
        };

    public override CancellationToken GetCancellationToken(int index)
        => index switch {
<# for (var t = 0; t < itemCount; t++) { #>
            <#=t#> => Item<#=t#> is CancellationToken value ? value : default!,
<# } #>
            _ => throw new ArgumentOutOfRangeException(nameof(index))
        };

    // Set

    public override void Set<T>(int index, T item)
    {
        switch (index) {
<# for (var t = 0; t < itemCount; t++) { #>
        case <#=t#>:
<# if (t < genericItemCount) { #>
            _item<#=t#> = item is T<#=t#> item<#=t#> ? item<#=t#> : default!;
<# } else { #>
            _item<#=t#> = _type.CastItem(<#=t#>, item);
<# } #>
            break;
<# } #>
        default:
            throw new ArgumentOutOfRangeException(nameof(index));
        }
    }

    public override void SetUntyped(int index, object? item)
    {
        switch (index) {
<# for (var t = 0; t < itemCount; t++) { #>
        case <#=t#>:
<# if (t < genericItemCount) { #>
            _item<#=t#> = item is T<#=t#> item<#=t#> ? item<#=t#> : default!;
<# } else { #>
            _item<#=t#> = _type.CastItem(<#=t#>, item);
<# } #>
            break;
<# } #>
        default:
            throw new ArgumentOutOfRangeException(nameof(index));
        }
    }

    public override void SetCancellationToken(int index, CancellationToken item)
    {
        switch (index) {
<# for (var t = 0; t < itemCount; t++) { #>
        case <#=t#>:
<# if (t < genericItemCount) { #>
            _item<#=t#> = item is T<#=t#> item<#=t#> ? item<#=t#> : default!;
<# } else { #>
            _item<#=t#> = _type.CastItem(<#=t#>, item);
<# } #>
            break;
<# } #>
        default:
            throw new ArgumentOutOfRangeException(nameof(index));
        }
    }

    // SetFrom

    public override void SetFrom(ArgumentList other)
    {
        if (other is <#=className#> vOther) {
<# for (var t = 0; t < itemCount; t++) { #>
            _item<#=t#> = vOther._item<#=t#>;
<# } #>
        }
        else {
<# for (var t = 0; t < itemCount; t++) { #>
<# if (t < genericItemCount) { #>
            _item<#=t#> = other.Get<#=t#><T<#=t#>>();
<# } else { #>
            _item<#=t#> = _type.CastItem(<#=t#>, other.GetUntyped(<#=t#>));
<# } #>
<# } #>
        }
    }

    // GetInvoker

    public override Func<object?, ArgumentList, object?> GetInvoker(MethodInfo method)
        => InvokerCache.GetOrAdd(
            (_type, method),
            RuntimeCodegen.Mode == RuntimeCodegenMode.DynamicMethods
            ? static key => { // Dynamic methods
                var (type, method1) = key;
                var parameters = method1.GetParameters();
                if (parameters.Length != <#=itemCount#>)
                    throw new ArgumentOutOfRangeException(nameof(method));
<# for (var t = 0; t < itemCount; t++) { #>
                if (parameters[<#=t#>].ParameterType != type.ItemTypes[<#=t#>])
                    throw new ArgumentOutOfRangeException(nameof(method));
<# } #>

                var declaringType = method1.DeclaringType!;
                var itemType = (Type?)null;
                var m = new DynamicMethod("_Invoke",
                    typeof(object),
                    new [] { typeof(object), typeof(ArgumentList) },
                    true);
                var il = m.GetILGenerator();

                // Cast ArgumentList to its actual type
                il.DeclareLocal(type.ListType);
                il.Emit(OpCodes.Ldarg_1);
                il.Emit(OpCodes.Castclass, type.ListType);
                il.Emit(OpCodes.Stloc_0);

                // Unbox target
                if (!method1.IsStatic) {
                    il.Emit(OpCodes.Ldarg_0);
                    il.Emit(declaringType.IsValueType ? OpCodes.Unbox_Any : OpCodes.Castclass, declaringType);
                }

<# for (var t = 0; t < itemCount; t++) { #>
                il.Emit(OpCodes.Ldloc_0);
                il.Emit(OpCodes.Call, type.ListType.GetProperty("Item<#=t#>")!.GetGetMethod()!);
<# if (t >= genericItemCount) { #>
                itemType = type.ItemTypes[<#=t#>];
                il.Emit(itemType.IsValueType ? OpCodes.Unbox_Any : OpCodes.Castclass, itemType);
<# } #>
<# } #>

                // Call method
                il.Emit(method1.IsStatic ? OpCodes.Call : OpCodes.Callvirt, method1);

                // Box return type
                if (method1.ReturnType == typeof(void))
                    il.Emit(OpCodes.Ldnull);
                else if (method1.ReturnType.IsValueType)
                    il.Emit(OpCodes.Box, method1.ReturnType);
                il.Emit(OpCodes.Ret);
                return (Func<object?, ArgumentList, object?>)m.CreateDelegate(typeof(Func<object, ArgumentList, object?>));
            }
            : static key => { // Expression trees
                var (type, method1) = key;
                var parameters = method1.GetParameters();
                if (parameters.Length != <#=itemCount#>)
                    throw new ArgumentOutOfRangeException(nameof(method));
<# for (var t = 0; t < itemCount; t++) { #>
                if (parameters[<#=t#>].ParameterType != type.ItemTypes[<#=t#>])
                    throw new ArgumentOutOfRangeException(nameof(method));
<# } #>

                var pSource = Expression.Parameter(typeof(object), "source");
                var pList = Expression.Parameter(typeof(ArgumentList), "list");
                var vList = Expression.Variable(type.ListType, "l");
                var eBody = Expression.Block(
                    new [] { vList },
                    [
                        Expression.Assign(vList, Expression.Convert(pList, type.ListType)),
                        ExpressionExt.ConvertToObject(
                            Expression.Call(
                                method1.IsStatic
                                    ? null
                                    : ExpressionExt.MaybeConvert(pSource, method1.DeclaringType!),
                                method1
<# for (var t = 0; t < itemCount; t++) { #>
<# if (t < genericItemCount) { #>
                                , Expression.PropertyOrField(vList, "Item<#=t#>")
<# } else { #>
                                , Expression.Convert(Expression.PropertyOrField(vList, "Item<#=t#>"), type.ItemTypes[<#=t#>])
<# } #>
<# } #>
                                ))
                    ]);
                return (Func<object?, ArgumentList, object?>)Expression
                    .Lambda(eBody, pSource, pList)
                    .Compile(preferInterpretation: RuntimeCodegen.Mode == RuntimeCodegenMode.InterpretedExpressions);
            }
        );

    // Read & Write

    [RequiresUnreferencedCode(UnreferencedCode.Serialization)]
    public override void Read(ArgumentListReader reader)
    {
<# if (simpleItemCount != 0) { #>
        var itemTypes = _type.ItemTypes;
<# } #>
<# for (var t = 0; t < itemCount; t++) { #>
<# if (t < genericItemCount) { #>
        if (typeof(T<#=t#>).IsValueType)
            reader.OnStruct(_item<#=t#>, <#=t#>);
        else
            reader.OnClass(typeof(T<#=t#>), _item<#=t#>, <#=t#>);
<# } else { #>
        reader.OnAny(itemTypes[<#=t#>], _item<#=t#>, <#=t#>);
<# } #>
<# } #>
    }

    [RequiresUnreferencedCode(UnreferencedCode.Serialization)]
    public override void Write(ArgumentListWriter writer)
    {
<# if (simpleItemCount != 0) { #>
        var itemTypes = _type.ItemTypes;
        var defaultValues = _type.DefaultValues;
<# } #>
<# for (var t = 0; t < itemCount; t++) { #>
<# if (t < genericItemCount) { #>
        if (typeof(T<#=t#>).IsValueType)
            _item<#=t#> = writer.OnStruct<T<#=t#>>(<#=t#>);
        else
            _item<#=t#> = (T<#=t#>)writer.OnClass(typeof(T<#=t#>), <#=t#>)!;
<# } else { #>
        _item<#=t#> = writer.OnAny(itemTypes[<#=t#>], <#=t#>, defaultValues[<#=t#>]);
<# } #>
<# } #>
    }

    // Equality

    public bool Equals(<#=className#>? other)
    {
        if (other == null)
            return false;

<# for (var t = itemCount - 1; t >= 0; t--) { #>
<# if (t < genericItemCount) { #>
        if (!EqualityComparer<T<#=t#>>.Default.Equals(Item<#=t#>, other.Item<#=t#>))
            return false;
<# } else { #>
        if (!Equals(Item<#=t#>, other.Item<#=t#>))
            return false;
<# } #>
<# } #>
        return true;
    }

    public override bool Equals(ArgumentList? other, int skipIndex)
    {
        if (other is not <#=className#> vOther)
            return false;

<# for (var t = itemCount - 1; t >= 0; t--) { #>
<# if (t < genericItemCount) { #>
        if (skipIndex != <#=t#> && !EqualityComparer<T<#=t#>>.Default.Equals(Item<#=t#>, vOther.Item<#=t#>))
            return false;
<# } else { #>
        if (skipIndex != <#=t#> && !Equals(Item<#=t#>, vOther.Item<#=t#>))
            return false;
<# } #>
<# } #>
        return true;
    }

    public override int GetHashCode()
    {
        unchecked {
<# for (var t = 0; t < itemCount; t++) { #>
<# if (t == 0) { #>
            var hashCode =
<# } else { #>
#if NETCOREAPP3_1_OR_GREATER
            hashCode = (int)BitOperations.RotateLeft((uint)hashCode, <#= t * 13 % 32 #>) +
#else
            hashCode = 397*hashCode +
#endif
<# } #>
                (Item<#=t#> is { } item<#=t#> ? item<#=t#>.GetHashCode() : 0);
<# } #>
            return hashCode;
        }
    }

    public override int GetHashCode(int skipIndex)
    {
        unchecked {
<# for (var t = 0; t < itemCount; t++) { #>
<# if (t == 0) { #>
            var hashCode =
<# } else { #>
#if NETCOREAPP3_1_OR_GREATER
            hashCode = (int)BitOperations.RotateLeft((uint)hashCode, <#= t * 13 % 32 #>) +
#else
            hashCode = 397*hashCode +
#endif
<# } #>
                (skipIndex == <#=t#> ? 0 : (Item<#=t#> is { } item<#=t#> ? item<#=t#>.GetHashCode() : 0));
<# } #>
            return hashCode;
        }
    }
}

<# } #>
<# } #>
