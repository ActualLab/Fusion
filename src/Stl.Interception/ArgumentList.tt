<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".cs" encoding="utf-8" #>
<#@ assembly Name="System.Core.dll" #>
<#@ assembly Name="System.Xml.dll" #>
<#@ assembly Name="System.Xml.Linq.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Linq" #>
<# 
    const int maxItemCount = 10;

    IEnumerable<int> AllBut(int count, int exceptIndex)
    {
        for (var i = 0; i < count; i++)
            if (i != exceptIndex)
                yield return i;
    }

    IEnumerable<int?> AllAnd(int count, int insertIndex)
    {
        for (var i = 0; i < count; i++) {
            if (i == insertIndex)
                yield return null;
            yield return i;

        }
    }

    string ItemList(string format, int count)
        => RemoveList(format, count, -1);

    string RemoveList(string format, int count, int index)
        => string.Join(", ", AllBut(count, index).Select(i => string.Format(format, i)));

    string InsertList(string format, int count, int index, string replacement)
        => string.Join(", ", AllAnd(count, index).Select(i => i.HasValue ? string.Format(format, i) : replacement));
#>
// ReSharper disable UnusedAutoPropertyAccessor.Global
// ReSharper disable MemberCanBePrivate.Global
// ReSharper disable ArrangeConstructorOrDestructorBody
using Cysharp.Text;
using System.Reflection.Emit;

namespace Stl.Interception;

[DataContract]
public abstract record ArgumentList
{
    protected static readonly ConcurrentDictionary<(Type, MethodInfo), Func<object, ArgumentList, object?>> InvokerCache = new();

    public static ArgumentList Empty { get; } = new ArgumentList0();
    public static ImmutableArray<Type> Types { get; } = ImmutableArray.Create(new [] {
        typeof(ArgumentList),
<# for (var itemCount = 1; itemCount <= maxItemCount; itemCount++) {
#>
        typeof(ArgumentList<<#=ItemList("", itemCount)#>>),
<# } #>
    });

    [JsonIgnore, Newtonsoft.Json.JsonIgnore]
    public abstract int Length { get; }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static ArgumentList New()
        => Empty;
<# for (var itemCount = 1; itemCount <= maxItemCount; itemCount++) {
    var argumentTypes = ItemList("T{0}", itemCount);
    var argumentDeclaration = ItemList("T{0} item{0}", itemCount);
    var argumentUsage = ItemList("item{0}", itemCount);
#>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static ArgumentList<<#=argumentTypes#>> New<<#=argumentTypes#>>(<#=argumentDeclaration#>)
        => new (<#=argumentUsage#>);
<# } #>

    public override string ToString() => "()";
    public virtual object?[] ToArray() => Array.Empty<object?>();
    public virtual object?[] ToArray(int skipIndex) => Array.Empty<object?>();

    public virtual Type?[]? GetNonDefaultItemTypes()
        => null;

#pragma warning disable MA0012
<# 
    for (var t = 0; t < maxItemCount; t++) {
#>
    public virtual T Get<#=t#><T>() => throw new IndexOutOfRangeException();
<#
    } 
#>
#pragma warning restore MA0012

    public virtual T Get<T>(int index)
        => throw new ArgumentOutOfRangeException(nameof(index));
    public virtual object? GetUntyped(int index)
        => throw new ArgumentOutOfRangeException(nameof(index));
    // Virtual non-generic method for frequent operation
    public virtual CancellationToken GetCancellationToken(int index)
        => throw new ArgumentOutOfRangeException(nameof(index));

    public virtual void Set<T>(int index, T value)
         => throw new ArgumentOutOfRangeException(nameof(index));
    public virtual void SetUntyped(int index, object? value)
         => throw new ArgumentOutOfRangeException(nameof(index));
    // Virtual non-generic method for frequent operation
    public virtual void SetCancellationToken(int index, CancellationToken item)
         => throw new ArgumentOutOfRangeException(nameof(index));

    public virtual void SetFrom(ArgumentList other)
    { }

    public virtual ArgumentList Insert<T>(int index, T item)
        => index == 0
            ? New(item)
            : throw new ArgumentOutOfRangeException(nameof(index));

    // Virtual non-generic method for frequent operation
    public virtual ArgumentList InsertCancellationToken(int index, CancellationToken item)
        => index == 0
            ? New(item)
            : throw new ArgumentOutOfRangeException(nameof(index));

    public virtual ArgumentList Remove(int index)
        => throw new ArgumentOutOfRangeException(nameof(index));

    public abstract Func<object, ArgumentList, object?> GetInvoker(MethodInfo method);

    // Equality

    public abstract bool Equals(ArgumentList? other, int skipIndex);
    public abstract int GetHashCode(int skipIndex);
}

[DataContract]
public sealed record ArgumentList0 : ArgumentList
{
    [JsonIgnore, Newtonsoft.Json.JsonIgnore]
    public override int Length => 0;

    public override Func<object, ArgumentList, object?> GetInvoker(MethodInfo method)
        => InvokerCache.GetOrAdd((GetType(), method), static key => {
            var (listType, method1) = key;
            if (method1.GetParameters().Length != 0)
                throw new ArgumentOutOfRangeException(nameof(method));

            var declaringType = method1.DeclaringType!;
            var m = new DynamicMethod("_Invoke",
                typeof(object),
                new [] { typeof(object), typeof(ArgumentList) },
                declaringType,
                true);
            var il = m.GetILGenerator();

            // Cast ArgumentList to its actual type
            il.Emit(OpCodes.Ldarg_1);
            il.Emit(OpCodes.Castclass, listType);
            il.Emit(OpCodes.Pop);

            // Unbox target
            il.Emit(OpCodes.Ldarg_0);
            il.Emit(declaringType.IsValueType ? OpCodes.Unbox_Any : OpCodes.Castclass, declaringType);

            // Call method
            il.Emit(OpCodes.Callvirt, method1);

            // Box return type
            if (method1.ReturnType == typeof(void))
                il.Emit(OpCodes.Ldnull);
            else if (method1.ReturnType.IsValueType)
                il.Emit(OpCodes.Box, method1.ReturnType);
            il.Emit(OpCodes.Ret);
            return (Func<object, ArgumentList, object?>)m.CreateDelegate(typeof(Func<object, ArgumentList, object?>));
        });

    public bool Equals(ArgumentList0? other)
        => !ReferenceEquals(other, null);
    public override bool Equals(ArgumentList? other, int skipIndex)
        => other?.GetType() == typeof(ArgumentList0);

    public override int GetHashCode() => 1;
    public override int GetHashCode(int skipIndex) => 1;
}

<# for (var itemCount = 1; itemCount <= maxItemCount; itemCount++) {
    var argumentTypes = ItemList("T{0}", itemCount);
#>
[DataContract]
public abstract record ArgumentList<#=itemCount#> : ArgumentList
{
    protected static Type?[] CreateNonDefaultItemTypes()
        => new Type?[<#=itemCount#>];

    [JsonIgnore, Newtonsoft.Json.JsonIgnore]
    public override int Length => <#=itemCount#>;
}

[DataContract]
public sealed record ArgumentList<<#=argumentTypes#>>(
<# 
    for (var t = 0; t < itemCount; t++) {
        var comma = t < (itemCount - 1) ? "," : "";
#>
    T<#=t#> Item<#=t#><#=comma#>
<#
    } 
#>
) : ArgumentList<#=itemCount#>
{
<# for (var t = 0; t < itemCount; t++) { #>
    private T<#=t#> _item<#=t#> = Item<#=t#>;
<# } #>

<# for (var t = 0; t < itemCount; t++) { #>
    [DataMember(Order = <#=t#>)] public T<#=t#> Item<#=t#> { get => _item<#=t#>; init => _item<#=t#> = value; }
<# } #>

    // Default constructor

    public ArgumentList()
        : this(<# Write(ItemList("default(T{0})!", itemCount)); #>)
    { }

    // ToString & ToArray

    public override string ToString()
    {
        using var sb = ZString.CreateStringBuilder();
        sb.Append('(');
        sb.Append(Item<#=0#>);
<# for (var t = 1; t < itemCount; t++) { #>
        sb.Append(", ");
        sb.Append(Item<#=t#>);
<# } #>
        sb.Append(')');
        return sb.ToString();
    }

    public override object?[] ToArray()
        => new object?[] { <# Write(ItemList("Item{0}", itemCount)); #> };

    public override object?[] ToArray(int skipIndex)
<# if (itemCount == 1) { #>
        => skipIndex == 0
            ? Array.Empty<object?>()
            : throw new ArgumentOutOfRangeException(nameof(skipIndex));
<# } else { #>
        => skipIndex switch {
<# for (var t = 0; t < itemCount; t++) { #>
            <#=t#> => new object?[] { <# Write(RemoveList("Item{0}", itemCount, t)); #> },
<# } #>
            _ => throw new ArgumentOutOfRangeException(nameof(skipIndex))
        };
<# } #>

    // GetNonDefaultItemTypes 

    public override Type?[]? GetNonDefaultItemTypes() {
        var itemTypes = (Type?[]?)null;
        Type? itemType;
<# 
    for (var t = 0; t < itemCount; t++) {
#>
        itemType = _item<#=t#>?.GetType();
        if (itemType != null && itemType != typeof(T<#=t#>)) {
            itemTypes ??= CreateNonDefaultItemTypes();
            itemTypes[<#=t#>] = itemType;
        }
<#
    } 
#>
        return itemTypes;
    }

    // Get

<# 
    for (var t = 0; t < itemCount; t++) {
#>
    public override T Get<#=t#><T>() => Item<#=t#> is T value ? value : default!;
<#
    } 
#>

    public override T Get<T>(int index)
        => index switch {
<# for (var t = 0; t < itemCount; t++) { #>
            <#=t#> => Item<#=t#> is T value ? value : default!,
<# } #>
            _ => throw new ArgumentOutOfRangeException(nameof(index))
        };

    public override object? GetUntyped(int index)
        => index switch {
<# for (var t = 0; t < itemCount; t++) { #>
            // ReSharper disable once HeapView.PossibleBoxingAllocation
            <#=t#> => Item<#=t#>,
<# } #>
            _ => throw new ArgumentOutOfRangeException(nameof(index))
        };

    public override CancellationToken GetCancellationToken(int index)
        => index switch {
<# for (var t = 0; t < itemCount; t++) { #>
            <#=t#> => Item<#=t#> is CancellationToken value ? value : default!,
<# } #>
            _ => throw new ArgumentOutOfRangeException(nameof(index))
        };

    // Set

    public override void Set<T>(int index, T value)
    {
        switch (index) {
<# for (var t = 0; t < itemCount; t++) { #>
        case <#=t#>:
            _item<#=t#> = value is T<#=t#> item<#=t#> ? item<#=t#> : default!;
            break;
<# } #>
        default:
            throw new ArgumentOutOfRangeException(nameof(index));
        }
    }

    public override void SetUntyped(int index, object? value)
    {
        switch (index) {
<# for (var t = 0; t < itemCount; t++) { #>
        case <#=t#>:
            _item<#=t#> = value is T<#=t#> item<#=t#> ? item<#=t#> : default!;
            break;
<# } #>
        default:
            throw new ArgumentOutOfRangeException(nameof(index));
        }
    }

    public override void SetCancellationToken(int index, CancellationToken item)
    {
        switch (index) {
<# for (var t = 0; t < itemCount; t++) { #>
        case <#=t#>:
            _item<#=t#> = item is T<#=t#> item<#=t#> ? item<#=t#> : default!;
            break;
<# } #>
        default:
            throw new ArgumentOutOfRangeException(nameof(index));
        }
    }

    // SetFrom

    public override void SetFrom(ArgumentList other)
    {
<# 
    for (var t = 0; t < itemCount; t++) {
#>
        _item<#=t#> = other.Get<#=t#><T<#=t#>>();
<#
    } 
#>
    }

    // Insert

    public override ArgumentList Insert<T>(int index, T item)
<# if (itemCount == maxItemCount) { #>
        => throw new ArgumentOutOfRangeException(nameof(index));
<# } else { #>
        => index switch {
<# for (var t = 0; t < itemCount; t++) { #>
            <#=t#> => New(<# Write(InsertList("Item{0}", itemCount, t, "item")); #>),
<# }#>
            <#=itemCount#> => New(<# Write(ItemList("Item{0}", itemCount)); #>, item),
            _ => throw new ArgumentOutOfRangeException(nameof(index))
        };
<# }#>

    public override ArgumentList InsertCancellationToken(int index, CancellationToken item)
<# if (itemCount == maxItemCount) { #>
        => throw new ArgumentOutOfRangeException(nameof(index));
<# } else { #>
        => index switch {
<# for (var t = 0; t < itemCount; t++) { #>
            <#=t#> => New(<# Write(InsertList("Item{0}", itemCount, t, "item")); #>),
<# }#>
            <#=itemCount#> => New(<# Write(ItemList("Item{0}", itemCount)); #>, item),
            _ => throw new ArgumentOutOfRangeException(nameof(index))
        };
<# }#>

    // Remove

    public override ArgumentList Remove(int index)
        => index switch {
<# for (var t = 0; t < itemCount; t++) { #>
            <#=t#> => New(<# Write(RemoveList("Item{0}", itemCount, t)); #>),
<# } #>
            _ => throw new ArgumentOutOfRangeException(nameof(index))
        };

    // GetInvoker

    public override Func<object, ArgumentList, object?> GetInvoker(MethodInfo method)
        => InvokerCache.GetOrAdd((GetType(), method), static key => {
            var (listType, method1) = key;
            var parameters = method1.GetParameters();
            if (parameters.Length != <#=itemCount#>)
                throw new ArgumentOutOfRangeException(nameof(method));
<# for (var t = 0; t < itemCount; t++) { #>
            if (parameters[<#=t#>].ParameterType != typeof(T<#=t#>))
                throw new ArgumentOutOfRangeException(nameof(method));
<# } #>

            var declaringType = method1.DeclaringType!;
            var m = new DynamicMethod("_Invoke",
                typeof(object),
                new [] { typeof(object), typeof(ArgumentList) },
                declaringType,
                true);
            var il = m.GetILGenerator();

            // Cast ArgumentList to its actual type
            il.DeclareLocal(listType);
            il.Emit(OpCodes.Ldarg_1);
            il.Emit(OpCodes.Castclass, listType);
            il.Emit(OpCodes.Stloc_0);

            // Unbox target
            il.Emit(OpCodes.Ldarg_0);
            il.Emit(declaringType.IsValueType ? OpCodes.Unbox_Any : OpCodes.Castclass, declaringType);

<# for (var t = 0; t < itemCount; t++) { #>
            il.Emit(OpCodes.Ldloc_0);
            il.Emit(OpCodes.Call, listType.GetProperty("Item<#=t#>")!.GetGetMethod()!);
<# } #>

            // Call method
            il.Emit(OpCodes.Callvirt, method1);

            // Box return type
            if (method1.ReturnType == typeof(void))
                il.Emit(OpCodes.Ldnull);
            else if (method1.ReturnType.IsValueType)
                il.Emit(OpCodes.Box, method1.ReturnType);
            il.Emit(OpCodes.Ret);
            return (Func<object, ArgumentList, object?>)m.CreateDelegate(typeof(Func<object, ArgumentList, object?>));
        });

    // Equality

    public bool Equals(ArgumentList<<#=argumentTypes#>>? other)
    {
        if (other == null)
            return false;

<# for (var t = itemCount - 1; t >= 0; t--) { #>
        if (!EqualityComparer<T<#=t#>>.Default.Equals(Item<#=t#>, other.Item<#=t#>))
            return false;
<# } #>
        return true;
    }

    public override bool Equals(ArgumentList? other, int skipIndex)
    {
        if (other is not ArgumentList<<#=argumentTypes#>> vOther)
            return false;

<# for (var t = itemCount - 1; t >= 0; t--) { #>
        if (skipIndex != <#=t#> && !EqualityComparer<T<#=t#>>.Default.Equals(Item<#=t#>, vOther.Item<#=t#>))
            return false;
<# } #>
        return true;
    }

    public override int GetHashCode()
    {
        unchecked {
            var hashCode = EqualityComparer<T0>.Default.GetHashCode(Item0!);
<# for (var t = 1; t < itemCount; t++) { #>
            hashCode = 397*hashCode + EqualityComparer<T<#=t#>>.Default.GetHashCode(Item<#=t#>!);
<# } #>
            return hashCode;
        }
    }

    public override int GetHashCode(int skipIndex)
    {
        unchecked {
            var hashCode = skipIndex == 0 ? 0 : EqualityComparer<T0>.Default.GetHashCode(Item0!);
<# for (var t = 1; t < itemCount; t++) { #>
            hashCode = 397*hashCode + (skipIndex == <#=t#> ? 0 : EqualityComparer<T<#=t#>>.Default.GetHashCode(Item<#=t#>!));
<# } #>
            return hashCode;
        }
    }
}

<# } #>
