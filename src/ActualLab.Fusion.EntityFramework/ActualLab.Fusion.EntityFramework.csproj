<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFrameworks Condition="$(UseMultitargeting)">net9.0;net8.0;net7.0;net6.0;net5.0;netcoreapp3.1;netstandard2.1;netstandard2.0</TargetFrameworks>
    <PackageTags>actual_chat actual_lab actual_lab_fusion ef</PackageTags>
    <Description>ActualLab.Fusion.EntityFramework - Fusion services utilizing EF Core.</Description>
    <IsServerSideOnly>true</IsServerSideOnly>
  </PropertyGroup>

  <!-- Suppressed warnings -->
  <PropertyGroup>
    <!-- EF packages are server-side only, so we can safely suppress all trimming-related warnings -->
    <!-- IL2060: Call to 'Method' cannot be statically analyzed -->
    <!-- IL2111: Method 'Method' with parameters or return value with `DynamicallyAccessedMembersAttribute` is accessed via reflection. Trimmer can't guarantee availability of the requirements of the method. -->
    <NoWarn>$(NoWarn);IL2060;IL2111</NoWarn>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Ulid" />
  </ItemGroup>

  <ItemGroup Condition="!$(TargetFramework.StartsWith('netstandard2.0'))">
    <PackageReference Include="MemoryPack.Generator" PrivateAssets="all" />
  </ItemGroup>

  <ItemGroup Condition="$(TargetFramework.StartsWith('net9'))">
    <PackageReference Include="Microsoft.EntityFrameworkCore" />
    <PackageReference Include="Microsoft.EntityFrameworkCore.Relational" />
  </ItemGroup>
  <ItemGroup Condition="$(TargetFramework.StartsWith('net8'))">
    <PackageReference Include="Microsoft.EntityFrameworkCore" VersionOverride="$(EntityFrameworkCoreVersion8)" />
    <PackageReference Include="Microsoft.EntityFrameworkCore.Relational" VersionOverride="$(EntityFrameworkCoreVersion8)" />
  </ItemGroup>
  <ItemGroup Condition="$(TargetFramework.StartsWith('net7'))">
    <PackageReference Include="Microsoft.EntityFrameworkCore" VersionOverride="$(EntityFrameworkCoreVersion7)" />
    <PackageReference Include="Microsoft.EntityFrameworkCore.Relational" VersionOverride="$(EntityFrameworkCoreVersion7)" />
  </ItemGroup>
  <ItemGroup Condition="$(TargetFramework.StartsWith('net6'))">
    <PackageReference Include="Microsoft.EntityFrameworkCore" VersionOverride="$(EntityFrameworkCoreVersion6)" />
    <PackageReference Include="Microsoft.EntityFrameworkCore.Relational" VersionOverride="$(EntityFrameworkCoreVersion6)" />
  </ItemGroup>
  <ItemGroup Condition="$(TargetFramework.StartsWith('net5')) or $(TargetFramework.StartsWith('netcore')) or $(TargetFramework.StartsWith('netstandard2.1'))">
    <PackageReference Include="Microsoft.EntityFrameworkCore" VersionOverride="$(EntityFrameworkCoreVersion5)" />
    <PackageReference Include="Microsoft.EntityFrameworkCore.Relational" VersionOverride="$(EntityFrameworkCoreVersion5)" />
  </ItemGroup>
  <ItemGroup Condition="$(TargetFramework.StartsWith('netstandard2.0'))">
    <PackageReference Include="Microsoft.EntityFrameworkCore" VersionOverride="$(EntityFrameworkCoreVersion3)" />
    <PackageReference Include="Microsoft.EntityFrameworkCore.Relational" VersionOverride="$(EntityFrameworkCoreVersion3)" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\ActualLab.Fusion\ActualLab.Fusion.csproj" />
  </ItemGroup>
	
  <ItemGroup>
    <Using Condition="$([MSBuild]::IsTargetFrameworkCompatible('$(TargetFramework)', 'net9.0'))" Alias="Lock" Include="System.Threading.Lock" />
    <Using Condition="!$([MSBuild]::IsTargetFrameworkCompatible('$(TargetFramework)', 'net9.0'))" Alias="Lock" Include="Backport.System.Threading.Lock" />
    <Using Alias="LockFactory" Include="Backport.System.Threading.LockFactory" />
  </ItemGroup>	

</Project>
